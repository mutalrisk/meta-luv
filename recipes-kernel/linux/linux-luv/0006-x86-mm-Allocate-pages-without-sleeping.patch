From 774f1b26f31a042da7d6642b5ac9e81bf7f8b73b Mon Sep 17 00:00:00 2001
From: Sai Praneeth <sai.praneeth.prakhya@intel.com>
Date: Wed, 10 Jan 2018 11:23:47 -0800
Subject: [PATCH 6/9] x86/mm: Allocate pages without sleeping

When CONFIG_EFI_WARN_ON_ILLEGAL_ACCESSES is enabled, and if some
firmware does illegal accesses, kernel will be in interrupt context when
it's trying to fixup this page fault. Hence, allocate pages without
sleeping in interrupt context.

This change shouldn't affect any other page allocations because this
allocation is used only by efi functions and not any other.

Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Cc: Lee, Chun-Yi <jlee@suse.com>
Cc: Borislav Petkov <bp@alien8.de>
Cc: Fenghua Yu <fenghua.yu@intel.com>
Cc: Ravi Shankar <ravi.v.shankar@intel.com>
Cc: Matt Fleming <matt@codeblueprint.co.uk>
Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
CC: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 arch/x86/include/asm/pgalloc.h |  5 +++++
 arch/x86/mm/pageattr.c         | 18 ++++++++++++++++--
 arch/x86/platform/efi/quirks.c |  2 ++
 3 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/arch/x86/include/asm/pgalloc.h b/arch/x86/include/asm/pgalloc.h
index aff42e1da6ee..62e1d21eca4d 100644
--- a/arch/x86/include/asm/pgalloc.h
+++ b/arch/x86/include/asm/pgalloc.h
@@ -42,6 +42,11 @@ extern gfp_t __userpte_alloc_gfp;
 #endif
 
 /*
+ * Are we allocating pages to firmware while fixing illegal access
+ */
+extern bool fixing_efi_illegal_access;
+
+/*
  * Allocate and free page tables.
  */
 extern pgd_t *pgd_alloc(struct mm_struct *);
diff --git a/arch/x86/mm/pageattr.c b/arch/x86/mm/pageattr.c
index 85cf12219dea..91b41c617a91 100644
--- a/arch/x86/mm/pageattr.c
+++ b/arch/x86/mm/pageattr.c
@@ -42,6 +42,8 @@ struct cpa_data {
 	struct page	**pages;
 };
 
+bool fixing_efi_illegal_access = false;
+
 /*
  * Serialize cpa() (for !DEBUG_PAGEALLOC which uses large identity mappings)
  * using cpa_lock. So that we don't allow any other cpu, with stale large tlb
@@ -904,7 +906,13 @@ static void unmap_pud_range(p4d_t *p4d, unsigned long start, unsigned long end)
 
 static int alloc_pte_page(pmd_t *pmd)
 {
-	pte_t *pte = (pte_t *)get_zeroed_page(GFP_KERNEL);
+	pte_t *pte;
+
+	if (fixing_efi_illegal_access)
+		pte = (pte_t *)get_zeroed_page(GFP_ATOMIC);
+	else
+		pte = (pte_t *)get_zeroed_page(GFP_KERNEL);
+
 	if (!pte)
 		return -1;
 
@@ -914,7 +922,13 @@ static int alloc_pte_page(pmd_t *pmd)
 
 static int alloc_pmd_page(pud_t *pud)
 {
-	pmd_t *pmd = (pmd_t *)get_zeroed_page(GFP_KERNEL);
+	pmd_t *pmd;
+
+	if (fixing_efi_illegal_access)
+		pmd = (pmd_t *)get_zeroed_page(GFP_ATOMIC);
+	else
+		pmd = (pmd_t *)get_zeroed_page(GFP_KERNEL);
+
 	if (!pmd)
 		return -1;
 
diff --git a/arch/x86/platform/efi/quirks.c b/arch/x86/platform/efi/quirks.c
index d4c6577a63e3..a9ac6c97ec4d 100644
--- a/arch/x86/platform/efi/quirks.c
+++ b/arch/x86/platform/efi/quirks.c
@@ -809,7 +809,9 @@ int efi_illegal_accesses_fixup(unsigned long phys_addr)
 		 */
 		pr_warn(FW_BUG "Fixing illegal access to EFI region at PA: "
 			"0x%lx\n", phys_addr);
+		fixing_efi_illegal_access = true;
 		efi_map_region(&md);
+		fixing_efi_illegal_access = false;
 		fixed_page_fault = true;
 	}
 
-- 
2.1.4

