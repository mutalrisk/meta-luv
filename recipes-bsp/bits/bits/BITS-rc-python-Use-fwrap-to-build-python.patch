From 0a84e3aa41f00bb70640bfc46f8b13e419b76739 Mon Sep 17 00:00:00 2001
From: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Date: Mon, 16 Nov 2015 09:56:56 -0800
Subject: [PATCH] BITS: rc: python: Use fwrap to build python

If this flag is not used, the following compiler warning is observed:

    grub/grub-core/contrib-deps/python/Modules/arraymodule.c:1794:19:
    error: assuming signed overflow does not occur when assuming that
    (X + c) < X is always false [-Werror=strict-overflow]
          if ((step > 0 && stop < start) ||
                        ^

Furthermore, stand-alone builds of Python are built using the -fwrap cflag to
instruct the compiler to not optimize comparions between signed
variables that can wrap. Thus, we simply add the flag.

Also, by analizing the function in question (array_ass_subscr), one can
observe there exists at least one code path that leads to the (X + c) < X
comparison. This could occur if the value argument is NULL. In such a case,
step = 1, start = i, stop = + 1; which leads to:

    step > 0 && stop  < start
    1    > 0 && i + 1 < i

The second portion of the comparison is always false, provided that
i does not wrap around.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
---
 rc/python/Makefile.core.def | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/rc/python/Makefile.core.def b/rc/python/Makefile.core.def
index 7990129..cf07ced 100644
--- a/rc/python/Makefile.core.def
+++ b/rc/python/Makefile.core.def
@@ -29,7 +29,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 module = {
         name = python;
         cppflags = '-I$(top_srcdir)/contrib/python -I$(srcdir)/contrib-deps/python/Include -D_IEEE_LIBM -D__LITTLE_ENDIAN= -I$(srcdir)/contrib-deps/fdlibm $(CONTRIB_CPPFLAGS) -include contrib/acpica/acenv.h -DGRUB2 -DACPI_LIBRARY -I$(top_srcdir)/contrib/acpica -I$(srcdir)/contrib-deps/acpica/source/include -U__ELF__ -I$(srcdir)/contrib-deps/libffi/include -I$(srcdir)/contrib-deps/libffi/src/x86 -I$(srcdir)/contrib-deps/python/Modules/zlib';
-        cflags = '$(CONTRIB_CFLAGS) -fshort-wchar -maccumulate-outgoing-args -Wno-empty-body -Wno-float-equal -Wno-maybe-uninitialized -Wno-missing-field-initializers -Wno-missing-declarations -Wno-missing-format-attribute -Wno-missing-noreturn -Wno-missing-prototypes -Wno-nested-externs -Wno-old-style-definition -Wno-parentheses -Wno-redundant-decls -Wno-sign-compare -Wno-shadow -Wno-shift-negative-value -Wno-type-limits -Wno-undef -Wno-uninitialized -Wno-unused -Wno-unused-parameter -Wno-unused-value -Wno-unused-variable -Wno-write-strings';
+        cflags = '$(CONTRIB_CFLAGS) -fshort-wchar -maccumulate-outgoing-args -Wno-empty-body -Wno-float-equal -Wno-maybe-uninitialized -Wno-missing-field-initializers -Wno-missing-declarations -Wno-missing-format-attribute -Wno-missing-noreturn -Wno-missing-prototypes -Wno-nested-externs -Wno-old-style-definition -Wno-parentheses -Wno-redundant-decls -Wno-sign-compare -Wno-shadow -Wno-shift-negative-value -Wno-type-limits -Wno-undef -Wno-uninitialized -Wno-unused -Wno-unused-parameter -Wno-unused-value -Wno-unused-variable -Wno-write-strings -fwrapv';
         enable = i386_pc;
         enable = i386_efi;
         enable = x86_64_efi;
-- 
1.9.1

