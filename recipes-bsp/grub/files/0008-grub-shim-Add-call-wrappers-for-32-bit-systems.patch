From e7b2683eef9606c2c125672b2dd497693b408be8 Mon Sep 17 00:00:00 2001
From: Megha Dey <megha.dey@linux.intel.com>
Date: Wed, 20 Jun 2018 11:14:57 -0700
Subject: [PATCH] grub: shim: Add call wrappers for 32 bit systems

This patch adds the callwrap.S function to the Makefile while building the
32 bit grub-efi image, defines the efi_call_foo and the efi_shim_exit
function which are used by the shim bootloader to store and restore
context. These are used by the EFI chainloader when the UEFI LoadImage is
not used.

Signed-off-by: Megha Dey <megha.dey@intel.com>
---
 grub-core/Makefile.core.def        |  1 +
 grub-core/kern/i386/efi/callwrap.S | 40 ++++++++++++++++++++++++++++++++++++++
 include/grub/efi/api.h             |  5 ++++-
 3 files changed, 45 insertions(+), 1 deletion(-)
 create mode 100644 grub-core/kern/i386/efi/callwrap.S

diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index 2dfa22a..d1bd1d4 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -187,6 +187,7 @@ kernel = {
   x86_64_efi = kern/i386/tsc_pmtimer.c;

   i386_efi = kern/i386/efi/init.c;
+  i386_efi = kern/i386/efi/callwrap.S;
   i386_efi = bus/pci.c;

   x86_64 = kern/x86_64/dl.c;
diff --git a/grub-core/kern/i386/efi/callwrap.S b/grub-core/kern/i386/efi/callwrap.S
new file mode 100644
index 0000000..e0e5474
--- /dev/null
+++ b/grub-core/kern/i386/efi/callwrap.S
@@ -0,0 +1,40 @@
+/* callwrap.S */
+
+/* Copyright (C) 2016 Intel Corporation
+
+   This file contains the wrapper for i386 efi calls.
+
+   These functions are needed when not booting via UEFI LoadImage: the EFI
+   application that efi_call_foo invokes will call the UEFI Exit() interface.
+   This will return control to EFI firmware, which we don't want. Thus, the
+   chainloader overrides the UEFI Exit() interface so that we can return to
+   the point in which the grub chainloader jumped to the invoked EFI
+   application entry point.
+*/
+
+#include <config.h>
+#include <grub/symbol.h>
+
+	.file   "callwrap.S"
+	.text
+
+FUNCTION(efi_call_foo)
+	pushl %ebp
+	pushl %ebx
+	pushl %edi
+	pushl %esi
+	movl %esp, saved_sp(%ebp)
+	subl $48, %esp
+	movl  %esi, %ecx
+	call *%edi
+
+FUNCTION(efi_shim_exit)
+	movl saved_sp(%ebp), %esp
+	popl %ebp
+	popl %ebx
+	popl %edi
+	popl %esi
+	ret
+
+	.data
+saved_sp:	.long   0
diff --git a/include/grub/efi/api.h b/include/grub/efi/api.h
index c7c9f0e..47f46e3 100644
--- a/include/grub/efi/api.h
+++ b/include/grub/efi/api.h
@@ -1756,5 +1756,8 @@ grub_uint64_t EXPORT_FUNC(efi_wrap_10) (void *func, grub_uint64_t arg1,
                                         grub_uint64_t arg8, grub_uint64_t arg9,
                                         grub_uint64_t arg10);
 #endif
-
+grub_efi_status_t EXPORT_FUNC(efi_shim_exit) (grub_efi_handle_t handle, grub_efi_status_t exit_status,
+                                              grub_efi_uintn_t exit_data_size, grub_efi_char16_t *exit_data) __attribute__((noreturn));
+grub_uint64_t EXPORT_FUNC(efi_call_foo) (void *func, grub_uint64_t arg1,
+                                         grub_uint64_t arg2);
 #endif /* ! GRUB_EFI_API_HEADER */
-- 
1.9.1

