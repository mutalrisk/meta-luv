From e8ab3a6ba69794d1395da6a19537cf1fa3797bb1 Mon Sep 17 00:00:00 2001
From: Megha Dey <megha.dey@linux.intel.com>
Date: Thu, 21 Jun 2018 12:26:41 -0700
Subject: [PATCH] grub: core: chainloader: efi: extend loader options

The EFI Loaded Image protocol interface structure described in the UEFI
specification contains a LoadOptions member that can be used to obtain
data that is relevant to the loaded image. This LoadOptions is used by
the grub EFI chainloader to pass command line arguments to the loaded
image. This functionality can be extended to contain not only a string
of command line arguments but also other binary data that could be
used by the chainloaded grub.

A new grub_loader_options is included that contains both the command line
string and a grub_disk_dev. Adding a grub_disk_dev can be useful if,
for instance, the chainloaded grub needs to access a memory disk owned
by the chainloader.

Signed-off-by: Ricardo Neri <ricardo.neri-calderon@linux.intel.com>
Signed-off-by: Megha Dey <megha.dey@linux.intel.com>
---
 grub-core/loader/efi/chainloader.c | 33 ++++++++++++++++++++++++++-------
 include/grub/loader.h              |  9 +++++++++
 2 files changed, 35 insertions(+), 7 deletions(-)

diff --git a/grub-core/loader/efi/chainloader.c b/grub-core/loader/efi/chainloader.c
index 0648b67..2d400bb 100644
--- a/grub-core/loader/efi/chainloader.c
+++ b/grub-core/loader/efi/chainloader.c
@@ -49,7 +49,7 @@ static grub_efi_physical_address_t address;
 static grub_efi_uintn_t pages;
 static grub_efi_device_path_t *file_path;
 static grub_efi_handle_t image_handle;
-static grub_efi_char16_t *cmdline;
+static grub_loader_options_t *loader_options;
 static grub_int32_t shim_used;
 static grub_efi_physical_address_t shim_buffer;
 static grub_efi_uintn_t shim_pages;
@@ -594,8 +594,11 @@ grub_chainloader_unload (void)
     }
 
   grub_free (file_path);
-  grub_free (cmdline);
-  cmdline = 0;
+  if (loader_options->cmdline)
+    grub_free (loader_options->cmdline);
+  grub_free (loader_options);
+  loader_options = 0;
+
   file_path = 0;
 
   grub_dl_unref (my_mod);
@@ -950,6 +953,10 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
   else
     loaded_image->device_handle = dev_handle;
 
+  loader_options = grub_malloc (sizeof (*loader_options));
+  if (!loader_options)
+    goto fail;
+
   if (argc > 1)
     {
       int i, len;
@@ -959,8 +966,8 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
         len += grub_strlen (argv[i]) + 1;
 
       len *= sizeof (grub_efi_char16_t);
-      cmdline = p16 = grub_malloc (len);
-      if (! cmdline)
+      loader_options->cmdline = p16 = grub_malloc (len);
+      if (! ! loader_options->cmdline)
         goto fail;
 
       for (i = 1; i < argc; i++)
@@ -975,11 +982,21 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
         }
       *(--p16) = 0;
 
-      loaded_image->load_options = cmdline;
-      loaded_image->load_options_size = len;
+      loader_options->cmdline_size = len;
     }
+    else
+      {
+	loader_options->cmdline = 0;
+        loader_options->cmdline_size = 0;
+   }
+
+  loader_options->disk_dev = 0;
+  loaded_image->load_options = loader_options;
+  loaded_image->load_options_size = sizeof(*loader_options);
+
 
   grub_file_close (file);
+
   grub_device_close (dev);
 
   grub_loader_set (grub_chainloader_boot, grub_chainloader_unload, 0);
@@ -987,6 +1004,8 @@ grub_cmd_chainloader (grub_command_t cmd __attribute__ ((unused)),
 
  fail:
 
+  if (loader_options)
+    grub_free(loader_options);
   if (dev)
     grub_device_close (dev);
 
diff --git a/include/grub/loader.h b/include/grub/loader.h
index 7f82a49..7b52c18 100644
--- a/include/grub/loader.h
+++ b/include/grub/loader.h
@@ -35,6 +35,15 @@ enum
   GRUB_LOADER_FLAG_PXE_NOT_UNLOAD = 2,
 };
 
+struct grub_loader_options
+{
+  struct grub_disk_dev *disk_dev;
+  grub_uint16_t *cmdline;
+  grub_uint64_t cmdline_size;
+};
+
+typedef struct grub_loader_options grub_loader_options_t;
+
 void EXPORT_FUNC (grub_loader_set) (grub_err_t (*boot) (void),
 				    grub_err_t (*unload) (void),
 				    int flags);
-- 
1.9.1

