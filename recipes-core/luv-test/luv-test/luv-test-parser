#!/bin/sh
#
# Copyright (C) 2014 Intel Corporation; author Matt Fleming
#
# Two schemas for the luv test manager are supported.
# The 1.0 schema looks like this,
#
#  <version> <testsuite> <unittest> <tag> <tag data>
#
# The 1.1 schema looks like this,
#
# <version> <timestamp> <testsuite> <unittest> <tag> <tag data>
#
# where <tag> and <tag data> are one of,
#
# <tag> ::= RESULT <passes> <fails> <aborts> <skips> <warns>
#         | INFO <string>
#
# This is the format that all data on stdin must have.
#
# If the LUV_HTML_REPORT variable is specified, an HTML version of
# the reults will be appended to the file specified to such variable.

awk -v HTML=${LUV_HTML_REPORT} '

# Enclose '\''contents'\'' in an HTML div container. The id of the
# element is given by '\''elem_id'\'', a '\''class'\'' name for CSS
# style can be given. The container can be closed or left open. This
# is useful if not all of the contents are know when generating the
# container.

function html_create_div(elem_id, class, contents, closediv)
{
        div =  "<div id=\"" elem_id "\" class=\"" class "\">\n" contents;
        if (closediv == 1)
                div = div "\n</div> <!--" elem_id "-->";
        return div;
}

# Create an HTML link to control a testinfo container '\''id'\''. The
# link will point to a script function called toggle(id) when clicked.
# Thus, such function needs to be provided separately. The '\''text'\''
# is scanned for the pass/skip/failed. If found, the text color is set
# to green/orange/red, respectively; else, it is left to the default
# color. Users of this script are responsible of providing the definition
# of the toggle function.

function html_create_testinfo_ctrl_link(id, text)
{
        if (text ~ /pass/) {
                status = "passed";
        } else if (text ~ /skip/) {
                status = "skipped";
        # also use the leading space to not confuse with the kernel-
        # efi-warnings test suite
        } else if (text ~ / warning/) {
                status = "warning";
        } else if (text ~ /fail/) {
                status = "failed";
        } else {
                status = "";
        }
        link = "toggle('\''" id "'\'');return false;";
        html = "<a id=\"control_" id "\" href=\"#\" ";
        html = html "onClick=\"" link "\">[+]</a>";
        html = html "<span class=\"" status "\">" text;
        html = html "</span>\n";
        return html;
}

/^1.1/ {
	testsuite=$3
	unittest=$4
	tag=$5

	if (tag == "RESULT") {
		passes=$6
		fails=$7
		aborts=$8
		skips=$9
		warns=$10
	}
}

/^1.0/ {
	testsuite=$2
	unittest=$3
	tag=$4

	if (tag == "RESULT") {
		passes=$5
		fails=$6
		aborts=$7
		skips=$8
		warns=$10
	}
}

{
	if (!b) {
		if (!HTML) {
			HTML = "/dev/null"
		}
		b = 1;
		printf ("    [-] %s\n", testsuite);
		fflush("");
		# begin HTML code for this test suite
		ts_content =  html_create_testinfo_ctrl_link(testsuite,
							     testsuite);
		ts_content =  ts_content html_create_div("content_" testsuite,
							 "testsuite", "", 0);
		print html_create_div(testsuite, "", ts_content, 0) >> HTML;
	}

	#
	# Parse tags
	#
	if (tag == "START") {
		printf("      [+] %s... ", unittest);
		fflush("");
		# initialize empty string for the info of this test
		info = "";
	}

	if (tag == "RESULT") {
		#
		# Instead of reporting all results to the user lets only
		# report the most urgent/highest priority result.
		#
		# Failures are obviously bad and we report them above
		# everything else.
		#
		# Skips/aborts are not necesarily serious but rather
		# indicate potential gaps in the testing coverage (or
		# maybe we ran tests that are not supported by the
		# hardware). Only report if the entire unittest was
		# skipped/aborted.
		#
		# Passes indicate everything is fine.
		if (fails > 0)
			unittest_status = sprintf("%d failures!", fails);
		else if ((aborts > 0 || skips > 0) && !passes)
			unittest_status = "skipped";
		else if (warns > 0)
			unittest_status = sprintf("%d warnings", warns);
		else
			unittest_status = "passed";
		print unittest_status;
		fflush("");
	} else if (tag == "INFO") {
		info = info tstamp substr($0, index($0, tag) + length(tag)) "\n";
	}

	if (tag == "END") {
		# We need to wait until we complete parsing the unit test to
		# generate the HTML code to have all the test log info and its
		# status.

		href = html_create_testinfo_ctrl_link(unittest,\
						      unittest "... " unittest_status);
		gsub(/\n/, "<br>\n", info);
		content = html_create_div("content_" unittest, "testcase_info", info, 1);
		div = html_create_div("test_" unittest, "testcase", href content, 1);
		print div >> HTML;
        }
}
# We opened two HTML divs when started parsing. Close them.
END {
	print "</div> <!--content_" testsuite "-->" >> HTML;
	print "</div> <!--" testsuite "-->" >> HTML;
}
'
